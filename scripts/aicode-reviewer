#!/bin/bash

# AI Code Reviewer - Master Control Script
# Script t·ªïng h·ª£p ƒë·ªÉ qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo -e "${CYAN}ü§ñ AI Code Reviewer - Master Control${NC}"
echo "===================================="

# Function to print colored messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${MAGENTA}[COMMAND]${NC} $1"
}

# Function to show help
show_help() {
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  start           Start all services with Docker Compose"
    echo "  stop            Stop all services"
    echo "  restart         Restart all services"
    echo "  status          Show service status"
    echo "  logs            Show service logs"
    echo "  init-db         Initialize databases"
    echo "  reset-db        Reset databases (WARNING: deletes all data)"
    echo "  build           Build Docker images"
    echo "  clean           Clean up Docker resources"
    echo "  dev             Start development environment"
    echo "  test            Run tests"
    echo "  help            Show this help message"
    echo ""
    echo "Service Management:"
    echo "  $0 start [--build] [--logs]    Start services, optionally build images and follow logs"
    echo "  $0 stop [--volumes] [--all]    Stop services, optionally remove volumes/cleanup"
    echo "  $0 restart [--build]           Restart services, optionally rebuild images"
    echo "  $0 status                      Show current service status"
    echo "  $0 logs [service_name]         Show logs for all services or specific service"
    echo ""
    echo "Database Management:"
    echo "  $0 init-db                     Initialize databases (PostgreSQL + Neo4j)"
    echo "  $0 reset-db                    Reset all databases (WARNING: deletes data)"
    echo ""
    echo "Development:"
    echo "  $0 build [--no-cache]          Build Docker images"
    echo "  $0 clean [--all]               Clean Docker resources"
    echo "  $0 dev                         Start development environment"
    echo "  $0 test [auth|backend|frontend] Run tests"
    echo ""
    echo "Examples:"
    echo "  $0 start --build --logs        # Start with fresh build and follow logs"
    echo "  $0 stop --volumes              # Stop and remove data volumes"
    echo "  $0 restart --build             # Restart with fresh images"
    echo "  $0 logs backend                # Show backend service logs"
    echo "  $0 test auth                   # Run authentication tests"
}

# Function to check if we're in the right directory
check_project_root() {
    if [[ ! -f "$PROJECT_ROOT/docker-compose.yml" ]]; then
        print_error "docker-compose.yml not found. Please run this script from the project root."
        exit 1
    fi
    
    cd "$PROJECT_ROOT"
    print_success "Working directory: $PROJECT_ROOT"
}

# Function to execute start command
cmd_start() {
    print_header "Starting AI Code Reviewer Services"
    
    local args=()
    while [[ $# -gt 0 ]]; do
        case $1 in
            --build)
                args+=("--build")
                shift
                ;;
            --logs)
                args+=("--logs")
                shift
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done
    
    exec "$SCRIPT_DIR/start-services.sh" "${args[@]}"
}

# Function to execute stop command
cmd_stop() {
    print_header "Stopping AI Code Reviewer Services"
    
    local args=()
    while [[ $# -gt 0 ]]; do
        args+=("$1")
        shift
    done
    
    exec "$SCRIPT_DIR/stop-services.sh" "${args[@]}"
}

# Function to execute restart command
cmd_restart() {
    print_header "Restarting AI Code Reviewer Services"
    
    local build_flag=""
    while [[ $# -gt 0 ]]; do
        case $1 in
            --build)
                build_flag="--build"
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
    
    "$SCRIPT_DIR/stop-services.sh"
    exec "$SCRIPT_DIR/start-services.sh" $build_flag
}

# Function to show service status
cmd_status() {
    print_header "Service Status"
    
    # Check Docker Compose
    if command -v docker-compose >/dev/null 2>&1; then
        COMPOSE_CMD="docker-compose"
    elif docker compose version >/dev/null 2>&1; then
        COMPOSE_CMD="docker compose"
    else
        print_error "Docker Compose not found"
        exit 1
    fi
    
    echo ""
    print_status "Container Status:"
    $COMPOSE_CMD ps
    
    echo ""
    print_status "Service Health:"
    
    # Check each service
    services=("neo4j:7474" "postgres:5432" "redis:6379" "backend:8000" "frontend:5173")
    for service in "${services[@]}"; do
        IFS=':' read -r name port <<< "$service"
        if curl -f "http://localhost:$port" >/dev/null 2>&1 || \
           curl -f "http://localhost:$port/health" >/dev/null 2>&1; then
            echo -e "  ${GREEN}‚úì${NC} $name (localhost:$port)"
        else
            echo -e "  ${RED}‚úó${NC} $name (localhost:$port)"
        fi
    done
    
    echo ""
    print_status "URLs:"
    echo "  üåê Frontend:     http://localhost:5173"
    echo "  üîß Backend API:  http://localhost:8000"
    echo "  üìö API Docs:     http://localhost:8000/docs"
    echo "  üìä Neo4j:       http://localhost:7474"
}

# Function to show logs
cmd_logs() {
    print_header "Service Logs"
    
    if command -v docker-compose >/dev/null 2>&1; then
        COMPOSE_CMD="docker-compose"
    elif docker compose version >/dev/null 2>&1; then
        COMPOSE_CMD="docker compose"
    else
        print_error "Docker Compose not found"
        exit 1
    fi
    
    if [[ $# -gt 0 ]]; then
        # Show logs for specific service
        print_status "Following logs for service: $1"
        exec $COMPOSE_CMD logs -f "$1"
    else
        # Show logs for all services
        print_status "Following logs for all services (Ctrl+C to stop)"
        exec $COMPOSE_CMD logs -f
    fi
}

# Function to initialize database
cmd_init_db() {
    print_header "Initializing Databases"
    exec "$SCRIPT_DIR/init-database.sh"
}

# Function to reset database
cmd_reset_db() {
    print_header "Resetting Databases"
    exec "$SCRIPT_DIR/init-database.sh" --reset
}

# Function to build images
cmd_build() {
    print_header "Building Docker Images"
    
    if command -v docker-compose >/dev/null 2>&1; then
        COMPOSE_CMD="docker-compose"
    elif docker compose version >/dev/null 2>&1; then
        COMPOSE_CMD="docker compose"
    else
        print_error "Docker Compose not found"
        exit 1
    fi
    
    local build_args=()
    while [[ $# -gt 0 ]]; do
        case $1 in
            --no-cache)
                build_args+=("--no-cache")
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
    
    print_status "Building custom images..."
    $COMPOSE_CMD build "${build_args[@]}"
    print_success "Images built successfully"
}

# Function to clean resources
cmd_clean() {
    print_header "Cleaning Docker Resources"
    
    local clean_all=false
    while [[ $# -gt 0 ]]; do
        case $1 in
            --all)
                clean_all=true
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
    
    if [[ "$clean_all" == "true" ]]; then
        exec "$SCRIPT_DIR/stop-services.sh" --all
    else
        print_status "Cleaning unused Docker resources..."
        docker system prune -f
        print_success "Cleanup completed"
    fi
}

# Function to start development environment
cmd_dev() {
    print_header "Starting Development Environment"
    
    print_status "This will start services and set up development environment..."
    
    # Start services
    "$SCRIPT_DIR/start-services.sh" --build
    
    # Initialize database if needed
    print_status "Checking database initialization..."
    "$SCRIPT_DIR/init-database.sh"
    
    echo ""
    print_success "üéâ Development environment ready!"
    echo ""
    echo "üìã Development URLs:"
    echo "  üåê Frontend (Dev):   http://localhost:5173"
    echo "  üîß Backend API:      http://localhost:8000"
    echo "  üìö API Docs:         http://localhost:8000/docs"
    echo "  üìä Neo4j Browser:    http://localhost:7474"
    echo ""
    echo "üë§ Default Admin Login:"
    echo "  Username: admin"
    echo "  Password: secret"
    echo ""
    echo "üõ†Ô∏è  Development Commands:"
    echo "  $0 logs                # View all logs"
    echo "  $0 logs frontend       # View frontend logs"
    echo "  $0 logs backend        # View backend logs"
    echo "  $0 test                # Run all tests"
    echo "  $0 stop                # Stop all services"
}

# Function to run tests
cmd_test() {
    print_header "Running Tests"
    
    local test_type="$1"
    
    case "$test_type" in
        "auth"|"authentication")
            print_status "Running authentication tests..."
            cd "$PROJECT_ROOT/src/webapp/frontend"
            exec bash scripts/test-auth.sh
            ;;
        "backend")
            print_status "Running backend tests..."
            cd "$PROJECT_ROOT"
            if [[ -d "venv" ]]; then
                source venv/bin/activate
            fi
            exec python -m pytest tests/webapp/backend/ -v
            ;;
        "frontend")
            print_status "Running frontend tests..."
            cd "$PROJECT_ROOT/src/webapp/frontend"
            exec npm test
            ;;
        ""|"all")
            print_status "Running all tests..."
            
            # Backend tests
            print_status "1. Running backend tests..."
            cd "$PROJECT_ROOT"
            if [[ -d "venv" ]]; then
                source venv/bin/activate
            fi
            python -m pytest tests/webapp/backend/ -v
            
            # Frontend tests
            print_status "2. Running frontend tests..."
            cd "$PROJECT_ROOT/src/webapp/frontend"
            npm test -- --run
            
            # Authentication tests
            print_status "3. Running authentication tests..."
            bash scripts/test-auth.sh
            
            print_success "All tests completed!"
            ;;
        *)
            print_error "Unknown test type: $test_type"
            echo "Available test types: auth, backend, frontend, all"
            exit 1
            ;;
    esac
}

# Main execution
main() {
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    local command="$1"
    shift
    
    check_project_root
    
    case "$command" in
        "start")
            cmd_start "$@"
            ;;
        "stop")
            cmd_stop "$@"
            ;;
        "restart")
            cmd_restart "$@"
            ;;
        "status")
            cmd_status "$@"
            ;;
        "logs")
            cmd_logs "$@"
            ;;
        "init-db")
            cmd_init_db "$@"
            ;;
        "reset-db")
            cmd_reset_db "$@"
            ;;
        "build")
            cmd_build "$@"
            ;;
        "clean")
            cmd_clean "$@"
            ;;
        "dev")
            cmd_dev "$@"
            ;;
        "test")
            cmd_test "$@"
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@" 