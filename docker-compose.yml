services:
  # Neo4j for Knowledge Graph
  neo4j:
    container_name: aicode-reviewer-neo4j
    image: neo4j:5.14.0
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - ./neo4j/data:/data
      - ./neo4j/logs:/logs
      - ./neo4j/import:/import
      - ./neo4j/plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc"]
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for vector database and metadata
  postgres:
    container_name: aicode-reviewer-postgres
    image: ankane/pgvector:latest
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=aicode
      - POSTGRES_PASSWORD=aicode123
      - POSTGRES_DB=aicode_reviewer
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aicode"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for task queue and caching
  redis:
    container_name: aicode-reviewer-redis
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API service
  backend:
    container_name: aicode-reviewer-backend
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=aicode
      - POSTGRES_PASSWORD=aicode123
      - POSTGRES_DB=aicode_reviewer
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      # neo4j:
      #   condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend service
  frontend:
    container_name: aicode-reviewer-frontend
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    ports:
      - "5173:5173"
    volumes:
      # Only mount source code files, preserve node_modules from build
      - ./src/webapp/frontend/src:/app/src
      - ./src/webapp/frontend/public:/app/public
      - ./src/webapp/frontend/index.html:/app/index.html
      - ./src/webapp/frontend/vite.config.ts:/app/vite.config.ts
      - ./src/webapp/frontend/tsconfig.json:/app/tsconfig.json
      - ./src/webapp/frontend/tsconfig.node.json:/app/tsconfig.node.json
      - ./src/webapp/frontend/package.json:/app/package.json
      - ./src/webapp/frontend/package-lock.json:/app/package-lock.json
      # Preserve node_modules and package-lock.json from container
      - frontend_node_modules:/app/node_modules
    environment:
      - VITE_API_URL=http://backend:8000
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:5173"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  frontend_node_modules: 